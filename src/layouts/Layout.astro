---
import '@fontsource-variable/inter';
import '../styles/reset.css';
import '../styles/global.css';
import Footer from '../components/layout/Footer.astro';
import { SITE_URL } from '../constants/site';
import countriesList from '../data/mapping/countries.ts';
import missionData from '../data/mission/mission.json';
import { validateMission } from '../validators/mission';
import 'remixicon/fonts/remixicon.css';

export interface Properties {
  title?: string;
  description?: string;
  canonicalUrl?: string;
  countrySlug?: string;
  articleSchema?: Record<string, unknown>;
  noIndex?: boolean;
  image?: string;
}

const {
  title = 'Timothy for Change',
  description,
  canonicalUrl,
  countrySlug,
  articleSchema,
  noIndex,
  image,
} = Astro.props as Properties;

const mission = validateMission(missionData);

const countryMapping = Array.isArray(countriesList)
  ? countriesList.find((c) => c.slug === countrySlug)
  : undefined;

const defaultDescription = `${mission.mission}. Learn about ongoing conflicts and structural violence in Palestine, Ukraine, Sudan, the DRC, the Sahel, and more.`;

function trimDescription(desc: string, max = 160) {
  if (!desc) {
    return '';
  }

  const cleaned = desc.replaceAll(/\s+/g, ' ').trim();

  return cleaned.length > max
    ? `${cleaned.slice(0, max - 1).trimEnd()}â€¦`
    : cleaned;
}

const rawDescription = description || defaultDescription;
const pageDescription = trimDescription(rawDescription, 160);
const pageCanonicalUrl = canonicalUrl || `${SITE_URL}/`;
const pageImage = image || `${SITE_URL}/protest.jpg`;

const baseLdObject = {
  '@context': 'https://schema.org',
  '@graph': [
    {
      '@type': 'Person',
      '@id': `${SITE_URL}/#person`,
      name: 'Timothy Brits',
      alternateName: 'Timothy',
      url: SITE_URL,
      jobTitle: 'Analyst of Structural Violence',
      address: {
        '@type': 'PostalAddress',
        addressLocality: 'Pretoria',
        addressCountry: 'ZA',
      },
      knowsAbout: ['Structural Violence Analysis', 'Global Crises'],
      sameAs: [
        'https://github.com/TimothyForChange',
        'https://instagram.com/timothyforchange/',
        'https://threads.com/@timothyforchange',
      ],
    },
    {
      '@type': 'WebSite',
      '@id': `${SITE_URL}/#website`,
      url: SITE_URL,
      name: 'Timothy for Change',
      description: `${mission.mission}`,
      publisher: {
        '@id': `${SITE_URL}/#person`,
      },
      potentialAction: {
        '@type': 'SearchAction',
        target: {
          '@type': 'EntryPoint',
          urlTemplate: `${SITE_URL}/?search={search_term_string}`,
        },
        'query-input': 'required name=search_term_string',
      },
    },
    {
      '@type': 'BreadcrumbList',
      '@id': `${SITE_URL}/#breadcrumb`,
      itemListElement: [
        {
          '@type': 'ListItem',
          position: 1,
          name: 'Home',
          item: SITE_URL,
        },
        ...(countrySlug
          ? [
              {
                '@type': 'ListItem',
                position: 2,
                name: Array.isArray(countriesList)
                  ? countriesList.find((c) => c.slug === countrySlug)?.name ||
                    countrySlug
                  : countrySlug,
                item: `${SITE_URL}/countries/${countrySlug}`,
              },
            ]
          : []),
      ],
    },
    {
      '@type': 'WebPage',
      '@id': `${pageCanonicalUrl}#webpage`,
      url: pageCanonicalUrl,
      name: title,
      description: pageDescription,
      inLanguage: 'en-GB',
      isPartOf: {
        '@id': `${SITE_URL}/#website`,
      },
      primaryImageOfPage: pageImage
        ? {
            '@type': 'ImageObject',
            url: pageImage,
          }
        : undefined,
      breadcrumb: {
        '@id': `${SITE_URL}/#breadcrumb`,
      },
    },
  ],
};

const ldObject = {
  '@context': 'https://schema.org',
  '@graph': [
    ...baseLdObject['@graph'],
    ...(articleSchema ? [articleSchema] : []),
  ],
};
const ldJson = JSON.stringify(ldObject, undefined, 2);
---

<!doctype html>
<html lang='en'>
  <head>
    <meta charset='utf8' />
    <meta name='description' content={pageDescription} />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <meta name='author' content='Timothy for Change' />
    <meta
      name='robots'
      content={noIndex ? 'noindex, follow' : 'index, follow'}
    />
    <meta property='og:type' content={articleSchema ? 'article' : 'website'} />
    <meta property='og:locale' content='en_GB' />
    <meta property='og:url' content={pageCanonicalUrl} />
    <meta property='og:title' content={title} />
    <meta property='og:description' content={pageDescription} />
    <meta property='og:image' content={pageImage} />
    <meta property='og:image:alt' content={title} />
    <meta property='og:site_name' content='Timothy for Change' />
    {
      articleSchema && (
        <>
          <meta property='article:author' content={`${SITE_URL}/#person`} />
          <meta
            property='article:published_time'
            content={String(articleSchema.datePublished)}
          />
          <meta
            property='article:modified_time'
            content={String(articleSchema.dateModified)}
          />
          {countryMapping?.category && (
            <meta
              property='article:section'
              content={countryMapping.category}
            />
          )}
          {Array.isArray(articleSchema.keywords) &&
            articleSchema.keywords.map((keyword) => (
              <meta property='article:tag' content={keyword} />
            ))}
        </>
      )
    }
    <meta name='twitter:card' content='summary_large_image' />
    <meta name='twitter:title' content={title} />
    <meta name='twitter:description' content={pageDescription} />
    <meta name='twitter:image' content={pageImage} />
    <meta name='twitter:image:alt' content={title} />
    <meta name='color-scheme' content='light dark' />
    <meta name='theme-color' content='#000000' />
    <link rel='canonical' href={pageCanonicalUrl} />
    <link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />
    <link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
    <link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
    <link rel='manifest' href='/site.webmanifest' />
    <title>{title}</title>
    <link rel='sitemap' href='/sitemap-index.xml' />
    <script type='application/ld+json' set:html={ldJson} />
  </head>
  <body>
    <a class='skip-link' href='#container'>Skip to main content</a>
    <slot />
    <Footer />
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const skipLink = document.querySelector('.skip-link');
        if (skipLink) {
          skipLink.addEventListener('click', (event_) => {
            event_.preventDefault();
            const target = document.querySelector('#container');
            if (target) {
              target.focus();
              target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
          });
        }
      });
    </script>
  </body>
</html>
