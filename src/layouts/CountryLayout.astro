---
import { isArray, isEmpty, isObject as radashIsObject, isString as radashIsString } from 'radash';
import AdditionalReading from '../components/country/AdditionalReading.astro';
import ColonialLegacySection from '../components/country/ColonialLegacySection.astro';
import CountryHeader from '../components/country/CountryHeader.astro';
import CrisisSection from '../components/country/CrisisSection.astro';
import HistoricalContextSection from '../components/country/HistoricalContextSection.astro';
import HumanitarianImpact from '../components/country/HumanitarianImpact.astro';
import ImperialLegacySection from '../components/country/ImperialLegacySection.astro';
import TakeAction from '../components/country/TakeAction.astro';
import Timeline from '../components/country/Timeline.astro';
import BackButton from '../components/shared/BackButton.astro';
import type { CountryData } from '../types/country';
import { generateSlug } from '../utils/helpers.ts';
import Layout from './Layout.astro';
import 'remixicon/fonts/remixicon.css';
import countriesList from '../data/mapping/countries.ts';

export interface Properties {
  countryData?: CountryData;
  title?: string;
  countrySlug: string;
}

const { countryData, countrySlug } = Astro.props as Properties;
const passedTitle = (Astro.props as Properties).title;

const countryImageModules = import.meta.glob('/countries/*.webp');
const hasImage = `/countries/${countrySlug}.webp` in countryImageModules;
const image = hasImage ? `/countries/${countrySlug}.webp` : undefined;

const countryMapping = Array.isArray(countriesList)
  ? countriesList.find((c) => c.slug === countrySlug)
  : undefined;
const pageDescription =
  countryMapping?.seoDescription ||
  `Learn about the humanitarian crisis in ${countryData?.name} - Timothy for Change provides critical analysis of global humanitarian issues.`;
const canonicalUrl = `https://timothyforchange.co.za/${encodeURIComponent(countrySlug)}`;

const articleSchema = {
  '@type': 'Article',
  '@id': `https://timothyforchange.co.za/${countrySlug}/#article`,
  headline:
    passedTitle && radashIsString(passedTitle)
      ? passedTitle
      : `${countryData?.name} Crisis - Timothy for Change`,
  description: pageDescription,
  image: image ? `https://timothyforchange.co.za${image}` : undefined,
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': canonicalUrl,
  },
  author: {
    '@id': 'https://timothyforchange.co.za/#person',
  },
  publisher: {
    '@id': 'https://timothyforchange.co.za/#person',
  },
  datePublished: countryData?.lastUpdated || new Date().toISOString().split('T')[0],
  dateModified: countryData?.lastUpdated || new Date().toISOString().split('T')[0],
  about: [
    {
      '@type': 'Place',
      name: countryData?.name,
      addressCountry: countrySlug === 'palestine' ? 'PS' : undefined,
    },
    {
      '@type': 'Thing',
      name: 'Humanitarian Crisis',
    },
  ],
  keywords: [
    countryData?.name,
    'humanitarian crisis',
    'human rights',
    countryMapping?.category?.toLowerCase(),
  ].filter(Boolean),
};
---

<Layout
  title={passedTitle && typeof passedTitle === 'string'
    ? passedTitle
    : `${countryData?.name} Crisis - Timothy for Change`}
  description={pageDescription}
  canonicalUrl={canonicalUrl}
  countrySlug={countrySlug}
  articleSchema={articleSchema}
  image={image}
>
  <div class='page-wrapper'>
    <main class='container' id='container' tabindex='-1'>
      <div class='country-page'>
        <CountryHeader countryName={countryData?.name} countrySlug={countrySlug} />

        {
          radashIsString(countryData?.currentCrisisSummary) && (
            <CrisisSection summary={countryData.currentCrisisSummary} />
          )
        }

        {
          countryData?.humanitarianImpact && (
            <HumanitarianImpact
              humanitarianImpact={countryData.humanitarianImpact}
              lastUpdated={countryData.lastUpdated}
            />
          )
        }

        {
          isArray(countryData?.timeline) && !isEmpty(countryData?.timeline) && (
            <Timeline timeline={countryData.timeline} />
          )
        }

        {
          radashIsObject(countryData?.colonialRoot) && (
            <ColonialLegacySection colonialRoot={countryData.colonialRoot} />
          )
        }

        {
          radashIsObject(countryData?.imperialRoot) && (
            <ImperialLegacySection imperialRoot={countryData.imperialRoot} />
          )
        }

        {
          radashIsObject(countryData?.historicalContext) && (
            <HistoricalContextSection
              historicalContext={countryData.historicalContext}
              countrySlug={countrySlug}
            />
          )
        }

        {
          radashIsObject(countryData?.takeAction) && (
            <TakeAction takeAction={countryData.takeAction} id='take-action' />
          )
        }

        {
          isArray(countryData?.reading) && !isEmpty(countryData?.reading) && (
            <AdditionalReading reading={countryData.reading} id='sources' />
          )
        }

        <div class='country-bottom-back'>
          <BackButton />
        </div>
      </div>
    </main>
  </div>
</Layout>

<style>
  .country-page {
    max-width: var(--container-max-width);
    margin: 0 auto;
    padding: var(--card-padding);
  }

  .country-bottom-back {
    display: flex;
    justify-content: center;
    margin: var(--gap-xl) 0 var(--gap-sm);
  }

  .country-page p {
    line-height: 1.7;
    color: var(--text-secondary);
    margin-bottom: var(--gap);
  }

  @media (width >= 768px) {
    .country-page {
      padding: calc(var(--card-padding) + var(--space-xs));
    }

    .country-title {
      font-size: 2rem;
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: var(--gap);
    }

    .country-flag {
      font-size: 1.5rem;
    }
  }
</style>
