<div class='search-overlay' id='search-overlay'>
  <div class='search-container'>
    <div class='search-header'>
      <input
        type='text'
        class='search-input'
        id='search-input'
        placeholder='Search articles...'
        autocomplete='off'
        aria-label='Search articles'
      />
      <button class='search-close' id='search-close' aria-label='Close search'>
        <svg
          width='24'
          height='24'
          viewBox='0 0 24 24'
          fill='none'
          xmlns='http://www.w3.org/2000/svg'
        >
          <line x1='18' y1='6' x2='6' y2='18' stroke='currentColor' stroke-width='2'></line>
          <line x1='6' y1='6' x2='18' y2='18' stroke='currentColor' stroke-width='2'></line>
        </svg>
      </button>
    </div>
    <div class='search-results' id='search-results'></div>
  </div>
</div>

<script>
  const base = `${import.meta.env.BASE_URL || ''}`;

  let searchData: any[] = [];
  let searchOverlay: HTMLElement | null,
    searchInput: HTMLInputElement | null,
    searchResults: HTMLElement | null;

  async function initSearch() {
    const response = await fetch(base + 'search.json');
    searchData = await response.json();

    searchOverlay = document.getElementById('search-overlay');
    searchInput = document.getElementById('search-input') as HTMLInputElement;
    searchResults = document.getElementById('search-results');

    document.getElementById('search-toggle')?.addEventListener('click', openSearch);
    document.getElementById('search-close')?.addEventListener('click', closeSearch);
    searchInput?.addEventListener('input', handleSearch);

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && searchOverlay?.classList.contains('active')) {
        closeSearch();
      }
    });

    searchOverlay?.addEventListener('click', (e: Event) => {
      if (e.target === searchOverlay) {
        closeSearch();
      }
    });
  }

  function openSearch() {
    searchOverlay?.classList.add('active');
    document.body.style.overflow = 'hidden';
    setTimeout(() => searchInput?.focus(), 100);
  }

  function closeSearch() {
    searchOverlay?.classList.remove('active');
    document.body.style.overflow = '';
    if (searchInput) {
      searchInput.value = '';
    }
    if (searchResults) {
      searchResults.innerHTML = '';
    }
  }

  function handleSearch(e: Event) {
    const target = e.target as HTMLInputElement;
    const query = target.value.toLowerCase().trim();

    if (query.length < 2) {
      if (searchResults) {
        searchResults.innerHTML = '';
      }
      return;
    }

    const results = searchData
      .filter(
        (post: any) =>
          post.title.toLowerCase().includes(query) ||
          post.excerpt.toLowerCase().includes(query) ||
          (post.categories &&
            post.categories.some((cat: string) => cat.toLowerCase().includes(query)))
      )
      .slice(0, 10);

    displayResults(results, query);
  }

  function displayResults(results: any[], query: string) {
    if (results.length === 0) {
      if (searchResults) {
        searchResults.innerHTML = `
          <div class="search-no-results">
            <p>No articles found for "${query}"</p>
          </div>
        `;
      }
      return;
    }

    const resultsHTML = results
      .map(
        (post: any) => `
      <article class="search-result">
        <h3 class="search-result-title">
          <a href="${base}${post.url.startsWith('/') ? post.url.slice(1) : post.url}">${post.title}</a>
        </h3>
        <time class="search-result-date">${new Date(post.datePublished).toLocaleDateString(
          'en-GB',
          {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          }
        )}</time>
        ${post.excerpt ? `<p class="search-result-excerpt">${post.excerpt}</p>` : ''}
        ${
          post.categories
            ? `
          <div class="search-result-categories">
            ${post.categories.map((cat: string) => `<span class="search-category">${cat}</span>`).join(' ')}
          </div>
        `
            : ''
        }
      </article>
    `
      )
      .join('');

    if (searchResults) {
      searchResults.innerHTML = `
        <div class="search-results-header">
          <p>Found ${results.length} article${results.length === 1 ? '' : 's'} for "${query}"</p>
        </div>
        ${resultsHTML}
      `;
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSearch);
  } else {
    initSearch();
  }
</script>

<style>
  .search-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition:
      opacity 0.3s ease,
      visibility 0.3s ease;
  }

  .search-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .search-container {
    max-width: 800px;
    margin: calc(var(--grid-unit) * 10) auto calc(var(--grid-unit) * 4) auto;
    padding: 0 var(--content-padding);
  }

  .search-header {
    display: flex;
    align-items: center;
    background: var(--color-background);
    border: 2px solid var(--color-border);
    border-radius: 8px;
    padding: calc(var(--grid-unit) * 3);
    margin-bottom: calc(var(--grid-unit) * 5);
  }

  .search-input {
    flex: 1;
    border: none;
    background: none;
    font-family: var(--font-body);
    font-size: 1.125rem;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit) * 2) calc(var(--grid-unit) * 3);
    outline: none;
  }

  .search-input::placeholder {
    color: var(--color-text-muted);
  }

  .search-close {
    background: none;
    border: none;
    color: var(--color-text-muted);
    padding: calc(var(--grid-unit) / 2);
    cursor: pointer;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-close:hover,
  .search-close:focus {
    color: var(--color-accent);
    outline: none;
  }

  .search-results {
    max-height: 70vh;
    min-height: 40vh;
    overflow-y: auto;
    background: var(--color-background);
    border-radius: 8px;
    border: 1px solid var(--color-border);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: calc(var(--grid-unit) * 3) calc(var(--grid-unit) * 4) calc(var(--grid-unit) * 4)
      calc(var(--grid-unit) * 4);
  }

  .search-results:empty {
    display: none;
  }

  .search-results-header {
    padding: calc(var(--grid-unit) * 3) calc(var(--grid-unit) * 4);
    margin: calc(var(--grid-unit) * -3) calc(var(--grid-unit) * -4) calc(var(--grid-unit) * 3)
      calc(var(--grid-unit) * -4);
    border-bottom: 1px solid var(--color-border);
    background: var(--color-surface);
    position: sticky;
    top: 0;
    z-index: 1;
  }

  .search-results-header p {
    margin: 0;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .search-result {
    padding: calc(var(--grid-unit) * 6) calc(var(--grid-unit) * 6);
    margin-bottom: calc(var(--grid-unit) * 2);
    border-bottom: 1px solid var(--color-border);
    transition: background-color 0.2s ease;
  }

  .search-result:hover {
    background-color: var(--color-surface);
  }

  .search-result:last-child {
    border-bottom: none;
  }

  .search-result-title {
    font-family: var(--font-heading-secondary);
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: calc(var(--grid-unit) * 3);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .search-result-title a {
    color: var(--color-text-primary);
    text-decoration: none;
  }

  .search-result-title a:hover,
  .search-result-title a:focus {
    color: var(--color-accent);
  }

  .search-result-date {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    display: block;
    margin-bottom: calc(var(--grid-unit) * 4);
  }

  .search-result-excerpt {
    color: var(--color-text-secondary);
    line-height: 1.8;
    margin-bottom: calc(var(--grid-unit) * 5);
  }

  .search-result-categories {
    display: flex;
    flex-wrap: wrap;
    gap: calc(var(--grid-unit) * 2.5);
    margin-top: calc(var(--grid-unit) * 3);
  }

  .search-category {
    background-color: #e8a100;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit) * 1.5) calc(var(--grid-unit) * 2.5);
    font-size: 0.8rem;
    font-family: var(--font-mono);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border-radius: 3px;
    transition: all 0.2s ease;
  }

  .search-category:hover {
    background-color: #c13127;
    color: white;
  }

  :global([data-theme='dark']) .search-category {
    background-color: var(--color-surface);
    color: var(--color-text-primary);
    border: 1px solid var(--color-border);
  }

  :global([data-theme='dark']) .search-category:hover {
    background-color: var(--color-accent);
    color: white;
    border-color: var(--color-accent);
  }

  .search-no-results {
    padding: calc(var(--grid-unit) * 10) calc(var(--grid-unit) * 6);
    text-align: center;
  }

  .search-no-results p {
    color: var(--color-text-muted);
    font-style: italic;
    margin: 0;
    font-size: 1.1rem;
  }

  @media (max-width: 768px) {
    .search-container {
      margin: calc(var(--grid-unit) * 5) auto calc(var(--grid-unit) * 3) auto;
      padding: 0 calc(var(--grid-unit) * 2);
    }

    .search-result {
      padding: calc(var(--grid-unit) * 4) calc(var(--grid-unit) * 3);
      margin-bottom: calc(var(--grid-unit) * 1.5);
    }

    .search-results {
      padding: calc(var(--grid-unit) * 2) calc(var(--grid-unit) * 2.5) calc(var(--grid-unit) * 3)
        calc(var(--grid-unit) * 2.5);
    }

    .search-results-header {
      padding: calc(var(--grid-unit) * 2) calc(var(--grid-unit) * 2.5);
      margin: calc(var(--grid-unit) * -2) calc(var(--grid-unit) * -2.5) calc(var(--grid-unit) * 2)
        calc(var(--grid-unit) * -2.5);
    }

    .search-result-categories {
      gap: calc(var(--grid-unit) * 2);
    }

    .search-category {
      padding: calc(var(--grid-unit)) calc(var(--grid-unit) * 2);
    }

    .search-result-title {
      margin-bottom: calc(var(--grid-unit) * 2);
    }

    .search-result-date {
      margin-bottom: calc(var(--grid-unit) * 3);
    }

    .search-result-excerpt {
      margin-bottom: calc(var(--grid-unit) * 4);
    }
  }
</style>
