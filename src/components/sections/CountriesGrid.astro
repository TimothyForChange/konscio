---
import { DEFAULT_CATEGORY } from '../../constants/category.ts';
import countries from '../../data/mapping/countries.ts';
import type { Country } from '../../types/country';
import { generateSlug } from '../../utils/helpers.ts';
import CategoryFilter from '../common/CategoryFilter.astro';
import CountryCard from './CountryCard.astro';

const countriesData: Country[] = countries as Country[];

const categories = [
  ...new Set(
    countriesData
      .map((country) => country.category)
      .filter((cat) => typeof cat === 'string' && cat.trim() !== '')
  ),
];

const allCategories = [DEFAULT_CATEGORY, ...categories];
---

<section class='causes-section' aria-labelledby='causes-heading'>
  <h2 id='causes-heading' class='causes-heading'>Supporting Communities In</h2>

  <CategoryFilter
    categories={allCategories}
    activeCategory={DEFAULT_CATEGORY}
  />

  <div class='countries-container' id='countries-container'>
    {
      allCategories.map((category) => (
        <div
          id={`panel-${generateSlug(category)}`}
          role='tabpanel'
          class='category-panel'
          aria-labelledby={`tab-${generateSlug(category)}`}
          hidden={category !== DEFAULT_CATEGORY}
        >
          <ul
            class='countries-grid'
            id={`countries-grid-${generateSlug(category)}`}
          >
            {countriesData
              .filter(
                (country) =>
                  category === DEFAULT_CATEGORY ||
                  (typeof country.category === 'string' &&
                    country.category === category)
              )
              .map((country) => (
                <li class='country-item'>
                  <CountryCard
                    slug={country.slug}
                    name={country.name}
                    flag={
                      typeof country.flag === 'string'
                        ? country.flag
                        : undefined
                    }
                    description={
                      typeof country.description === 'string'
                        ? country.description
                        : undefined
                    }
                    category={
                      typeof country.category === 'string'
                        ? country.category
                        : undefined
                    }
                  />
                </li>
              ))}
          </ul>
        </div>
      ))
    }
  </div>
</section>

<script src='../../assets/scripts/category-filter.js'></script>

<style>
  .causes-section {
    margin-top: var(--section-gap);
    width: 100%;
  }

  .causes-heading {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    margin-bottom: var(--gap);
    text-align: center;
  }

  .countries-grid {
    display: grid;
    grid-template-columns: 1fr;
    grid-auto-rows: minmax(80px, auto);
    gap: var(--gap-sm);
    max-width: var(--grid-max-width);
    margin: 0 auto;
    list-style: none;
    padding: 0;
  }

  .country-item {
    margin: 0;
  }

  @media (min-width: 768px) {
    .countries-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: var(--gap);
    }

    .causes-heading {
      font-size: var(--font-size-xl);
    }
  }

  .category-panel {
    display: block;
  }

  .category-panel[hidden] {
    display: none;
  }
</style>
