---
import { DEFAULT_CATEGORY } from '../../constants/category.ts';
import countries from '../../data/countries.json';
import type { Country } from '../../types/country.ts';
import CategoryFilter from './CategoryFilter.astro';
import CountryCard from './CountryCard.astro';

const countriesData: Country[] = countries as Country[];

const categories = [
  ...new Set(
    countriesData
      .map((country) => country.category)
      .filter((cat) => typeof cat === 'string' && cat.trim() !== '')
  ),
];

const allCategories = [DEFAULT_CATEGORY, ...categories];
---

<section class='causes-section' aria-labelledby='causes-heading'>
  <h2 id='causes-heading' class='causes-heading'>Supporting Communities In</h2>

  <CategoryFilter
    categories={allCategories}
    activeCategory={DEFAULT_CATEGORY}
  />

  <ul class='countries-grid' id='countries-grid' role='list'>
    {
      countriesData.map((country) => (
        <CountryCard
          slug={country.slug}
          name={country.name}
          flag={typeof country.flag === 'string' ? country.flag : undefined}
          description={
            typeof country.description === 'string'
              ? country.description
              : undefined
          }
          category={
            typeof country.category === 'string' ? country.category : undefined
          }
          data-category={
            typeof country.category === 'string'
              ? country.category
              : DEFAULT_CATEGORY
          }
        />
      ))
    }
  </ul>
</section>

<script is:inline>
  const DEFAULT_CATEGORY = 'All';

  document.addEventListener('DOMContentLoaded', () => {
    function filterCountries(selectedCategory) {
      const buttons = document.querySelectorAll('.category-btn');
      const cards = document.querySelectorAll('.country-card');

      for (const button of buttons) {
        if (button.dataset.category === selectedCategory) {
          button.classList.add('active');
          button.setAttribute('aria-selected', 'true');
        } else {
          button.classList.remove('active');
          button.setAttribute('aria-selected', 'false');
        }
      }

      for (const card of cards) {
        const cardCategory = card.dataset.category;

        card.style.display =
          selectedCategory === DEFAULT_CATEGORY ||
          cardCategory === selectedCategory
            ? 'flex'
            : 'none';
      }
    }

    const categoryButtons = document.querySelectorAll('.category-btn');

    for (const button of categoryButtons) {
      button.addEventListener('click', (event) => {
        const target = event.target;

        filterCountries(target.dataset.category);
      });
    }
  });
</script>

<style>
  .causes-section {
    margin-top: var(--section-gap);
    width: 100%;
  }

  .causes-heading {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    margin-bottom: var(--gap);
    text-align: center;
  }

  .countries-grid {
    display: grid;
    grid-template-columns: 1fr;
    grid-auto-rows: minmax(80px, auto);
    gap: var(--gap-sm);
    max-width: var(--grid-max-width);
    margin: 0 auto;
  }

  .country-card {
    display: block;
    text-decoration: none;
    transition: var(--card-transition);
    box-sizing: border-box;
    box-shadow: var(--shadow-sm);
  }

  .country-card:hover {
    background: var(--bg-alt);
    border-color: var(--accent-primary);
    transform: var(--hover-transform);
    box-shadow: var(--hover-shadow);
  }

  .country-card:active {
    transform: var(--active-transform);
    box-shadow: var(--active-shadow);
    transition:
      transform 0.08s cubic-bezier(0.4, 0, 0.2, 1),
      box-shadow 0.08s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .country-flag {
    font-size: 1.5rem;
    flex-shrink: 0;
  }

  .country-info {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
    min-width: 0;
  }

  .country-name {
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    font-size: var(--font-size-base);
  }

  .country-description {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    line-height: 1.3;
  }

  @media (width >= 768px) {
    .countries-grid {
      gap: var(--gap-sm);
    }

    .country-card .country-card-inner {
      height: 100%;
      padding: var(--card-padding-sm);
    }

    .causes-heading {
      font-size: var(--font-size-xl);
    }
  }

  @media (hover: none) and (pointer: coarse) {
    .country-card:active {
      transform: scale(0.98);
      transition: transform 0.1s ease;
    }
  }
</style>
