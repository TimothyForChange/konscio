---
import { config } from '../config';
import HeaderMobileMenu from './HeaderMobileMenu.astro';
import HeaderNavigation from './HeaderNavigation.astro';
import HeaderSearch from './HeaderSearch.astro';

const { base = '' } = Astro.site ? { base: config.baseUrl } : { base: '' };
---

<header class='site-header'>
  <div class='header-content'>
    <button
      class='hamburger-toggle mobile-only'
      id='hamburger-toggle'
      aria-label='Toggle navigation menu'
      aria-expanded='false'
    >
      <svg
        width='24'
        height='24'
        viewBox='0 0 24 24'
        fill='none'
        xmlns='http://www.w3.org/2000/svg'
      >
        <path
          class='hamburger-line'
          d='M3 6h18'
          stroke='currentColor'
          stroke-width='2'
          stroke-linecap='round'></path>
        <path
          class='hamburger-line'
          d='M3 12h18'
          stroke='currentColor'
          stroke-width='2'
          stroke-linecap='round'></path>
        <path
          class='hamburger-line'
          d='M3 18h18'
          stroke='currentColor'
          stroke-width='2'
          stroke-linecap='round'></path>
      </svg>
    </button>

    <div class='site-title'>
      <a href={base} data-astro-prefetch>
        <img
          src={base + 'site-title.svg'}
          alt={config.title}
          class='title-svg'
          width='280'
          height='48'
        />
      </a>
    </div>

    <div class='header-controls'>
      <HeaderNavigation base={base} />

      <div class='mobile-controls'>
        <a
          href={base + 'rss.xml'}
          data-astro-prefetch
          class='rss-toggle'
          title='RSS Feed'
        >
          <svg
            width='24'
            height='24'
            viewBox='0 0 24 24'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
            aria-hidden='true'
          >
            <circle cx='5' cy='19' r='2' fill='currentColor'></circle>
            <path
              d='M3 3v2c8.284 0 15 6.716 15 15h2c0-9.389-7.611-17-17-17z'
              fill='currentColor'></path>
            <path
              d='M3 9v2c4.963 0 9 4.037 9 9h2c0-6.065-4.935-11-11-11z'
              fill='currentColor'></path>
          </svg>
          <span class='visually-hidden'>RSS</span>
        </a>

        <button
          class='search-toggle'
          id='search-toggle'
          aria-label='Search articles'
        >
          <svg
            width='24'
            height='24'
            viewBox='0 0 24 24'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
          >
            <circle
              cx='11'
              cy='11'
              r='8'
              stroke='currentColor'
              stroke-width='2'
              fill='none'></circle>
            <path
              d='M21 21l-4.35-4.35'
              stroke='currentColor'
              stroke-width='2'
              stroke-linecap='round'></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</header>

<HeaderMobileMenu base={base} />

<HeaderSearch />

<script>
  function initHamburgerMenu() {
    const hamburgerToggle = document.getElementById('hamburger-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const body = document.body;

    if (!hamburgerToggle || !mobileMenu) {
      return;
    }

    hamburgerToggle.addEventListener('click', () => {
      const isOpen = mobileMenu.classList.contains('active');

      if (isOpen) {
        mobileMenu.classList.remove('active');
        hamburgerToggle.setAttribute('aria-expanded', 'false');
        body.style.overflow = '';
      } else {
        mobileMenu.classList.add('active');
        hamburgerToggle.setAttribute('aria-expanded', 'true');
        body.style.overflow = 'hidden';
      }
    });

    const mobileNavLinks = mobileMenu.querySelectorAll('.mobile-nav-link');
    mobileNavLinks.forEach((link) => {
      link.addEventListener('click', () => {
        mobileMenu.classList.remove('active');
        hamburgerToggle.setAttribute('aria-expanded', 'false');
        body.style.overflow = '';
      });
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenu.classList.contains('active')) {
        mobileMenu.classList.remove('active');
        hamburgerToggle.setAttribute('aria-expanded', 'false');
        body.style.overflow = '';
      }
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initHamburgerMenu);
  } else {
    initHamburgerMenu();
  }
</script>

<style>
  .site-header {
    background-color: var(--color-surface);
    border-bottom: 2px solid var(--color-border);
    padding: calc(var(--grid-unit) * 3) 0;
    position: sticky;
    top: 0;
    z-index: 100;
  }

  .header-content {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: 0 var(--content-padding);
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: calc(var(--grid-unit) * 2);
  }

  .site-title a {
    display: block;
    line-height: 0;
  }

  .title-svg {
    height: 48px;
    width: auto;
    max-width: 280px;
    border: none !important;
    margin: 0 !important;
  }

  .header-controls {
    display: flex;
    align-items: center;
    gap: calc(var(--grid-unit) * 3);
    flex-shrink: 0;
  }

  .search-toggle {
    background: none;
    border: none;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit) / 2);
    cursor: pointer;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-toggle:hover,
  .search-toggle:focus {
    color: var(--color-accent);
    outline: none;
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .mobile-controls {
    display: flex;
    align-items: center;
    gap: calc(var(--grid-unit) * 2);
  }

  .mobile-only {
    display: none !important;
  }

  .hamburger-toggle {
    background: none;
    border: none;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit));
    cursor: pointer;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .rss-toggle {
    background: none;
    border: none;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit));
    cursor: pointer;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
  }

  .hamburger-toggle:hover,
  .hamburger-toggle:focus,
  .rss-toggle:hover,
  .rss-toggle:focus {
    color: var(--color-accent);
    outline: none;
  }

  @media (max-width: 768px) {
    .site-header {
      padding: calc(var(--grid-unit) * 2) 0;
    }

    .header-content {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      gap: calc(var(--grid-unit) * 2);
      padding: 0 calc(var(--grid-unit) * 2);
      width: 100vw;
      max-width: 100vw;
      margin: 0;
      box-sizing: border-box;
    }

    .mobile-only {
      display: flex !important;
      justify-self: start;
    }

    .site-title {
      justify-self: center;
      text-align: center;
      grid-column: 2;
    }

    .site-title a {
      display: inline-block;
    }

    .title-svg {
      height: 36px;
      width: auto;
      max-width: 180px;
    }

    .header-controls {
      justify-self: end;
      gap: 0;
      grid-column: 3;
    }

    .mobile-controls {
      display: flex !important;
      gap: calc(var(--grid-unit) * 1.5);
    }

    .hamburger-toggle,
    .rss-toggle,
    .search-toggle {
      padding: calc(var(--grid-unit) * 0.75);
    }
  }

  @media (max-width: 360px) {
    .header-content {
      grid-template-columns: 1fr auto 1fr;
      padding: 0 calc(var(--grid-unit) * 1);
    }

    .header-content > * {
      min-width: 0;
    }

    .title-svg {
      height: 32px;
      max-width: 140px;
    }

    .mobile-controls {
      gap: calc(var(--grid-unit) / 2) !important;
    }

    .hamburger-toggle,
    .rss-toggle,
    .search-toggle {
      padding: calc(var(--grid-unit) * 0.5);
    }
  }

  @media (max-width: 480px) {
    .mobile-controls {
      gap: calc(var(--grid-unit)) !important;
    }
  }
</style>
