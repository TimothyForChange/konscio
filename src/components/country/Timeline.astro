---
import type { TimelineEvent } from '../../types/country.ts';
import TimelineItem from '../ui/TimelineItem.astro';

interface Properties {
  timeline?: TimelineEvent[] | Array<Record<string, string>>;
}

const { timeline } = Astro.props as Properties;
---

<section class='timeline-section'>
  <h2 class='timeline-title'>Historical Timeline</h2>
  <div class='timeline-container'>
    {
      (() => {
        // Safely handle timeline data with proper type checking
        const timelineToUse = Array.isArray(timeline) ? timeline : [];

        return timelineToUse
          .filter(
            (item): item is TimelineEvent =>
              item !== null &&
              typeof item === 'object' &&
              ('year' in item || 'event' in item) &&
              (item.year !== undefined || item.event !== undefined)
          )
          .map((item) => (
            <div class='timeline-row'>
              <div class='timeline-gutter'>
                <div class='timeline-dot' />
              </div>
              <div class='timeline-body'>
                <TimelineItem year={item.year} event={item.event} />
              </div>
            </div>
          ));
      })()
    }
  </div>
</section>

<style>
  .timeline-section {
    margin: var(--section-gap) 0;
    padding: calc(var(--section-gap) / 1.3) 0;
  }

  .timeline-title {
    font-size: 1.5rem;
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    margin-bottom: var(--heading-gap);
    text-align: left;
    border-bottom: var(--section-heading-border);
    padding-bottom: var(--section-heading-padding-bottom);
  }

  .timeline-container {
    position: relative;

    --timeline-pad: 1.5rem;
    --timeline-border: 3px;
    --timeline-dot-size: 12px;
    --timeline-dot-border: 3px;
    --timeline-gutter: 48px;

    display: grid;
    grid-template-columns: var(--timeline-gutter) 1fr;
    gap: var(--space-xs) var(--gap-lg);
    padding-top: var(--section-heading-padding-bottom);
    padding-bottom: var(--section-heading-padding-bottom);
  }

  .timeline-row {
    display: contents;
  }

  .timeline-gutter {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    grid-column: 1 / 2;
    z-index: 2;
    margin-top: calc(var(--section-heading-padding-bottom) * -1);
  }

  .timeline-body {
    grid-column: 2 / -1;
    display: flex;
    align-items: center;
  }

  .timeline-content {
    background: var(--bg-card);
    border: 1px solid var(--border);
    border-radius: 8px;
    padding: 1rem 1.25rem;
    box-shadow: var(--shadow-sm);
  }

  .timeline-year {
    font-weight: 700;
    font-size: 0.875rem;
    color: var(--accent-primary);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .timeline-event {
    color: var(--text-secondary);
    line-height: 1.6;
    font-size: 0.9rem;
  }

  .timeline-event strong {
    color: var(--text-primary);
    font-weight: 600;
  }

  @media (width >= 768px) {
    .timeline-container {
      --timeline-gutter: 64px;
    }

    .timeline-content {
      padding: 1rem 1.25rem;
    }

    .timeline-year {
      font-size: 0.875rem;
    }

    .timeline-event {
      font-size: 0.9rem;
    }
  }

  .timeline-container::before {
    content: '';
    position: absolute;
    left: calc(var(--timeline-gutter) / 2);
    top: calc(var(--timeline-dot-size) / 2);
    bottom: calc(var(--timeline-dot-size) / 2);
    width: var(--timeline-border);
    background: var(--accent-primary);
    transform: translateX(-50%);
  }

  .timeline-dot {
    position: relative;
    width: var(--timeline-dot-size);
    height: var(--timeline-dot-size);
    border: var(--timeline-dot-border) solid var(--accent-primary);
    border-radius: 50%;
    background: var(--bg);
    z-index: 1;
  }

  @media (prefers-reduced-motion: reduce) {
    .timeline-content {
      transition: none;
    }

    .timeline-content:hover {
      transform: none;
    }
  }
</style>
